name: CI / Publish All NuGet Packages in Parallel + Verification

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Set version from tag
        id: set-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"

  publish-infrastructure:
    runs-on: ubuntu-latest
    needs: setup
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Build, Pack, Push Infrastructure
        run: |
          dotnet restore Infrastructure/Infrastructure.csproj
          dotnet build Infrastructure/Infrastructure.csproj -c Release --no-restore
          dotnet pack Infrastructure/Infrastructure.csproj -c Release --no-build -p:PackageVersion=$VERSION -o ./nupkg
          dotnet nuget push ./nupkg/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push ./nupkg/*.nupkg --api-key $GITHUB_TOKEN --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate

  publish-core:
    runs-on: ubuntu-latest
    needs: setup
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Build, Pack, Push Core
        run: |
          dotnet restore Core/Core.csproj
          dotnet build Core/Core.csproj -c Release --no-restore
          dotnet pack Core/Core.csproj -c Release --no-build -p:PackageVersion=$VERSION -o ./nupkg
          dotnet nuget push ./nupkg/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push ./nupkg/*.nupkg --api-key $GITHUB_TOKEN --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate

  publish-shared:
    runs-on: ubuntu-latest
    needs: setup
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Build, Pack, Push Shared
        run: |
          dotnet restore Shared/Shared.csproj
          dotnet build Shared/Shared.csproj -c Release --no-restore
          dotnet pack Shared/Shared.csproj -c Release --no-build -p:PackageVersion=$VERSION -o ./nupkg
          dotnet nuget push ./nupkg/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push ./nupkg/*.nupkg --api-key $GITHUB_TOKEN --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate

  verify-publish:
    runs-on: ubuntu-latest
    needs: [publish-infrastructure, publish-core, publish-shared]
    env:
      VERSION: ${{ needs.setup.outputs.version }}
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Verify NuGet.org packages
        run: |
          PACKAGES=("Infrastructure" "Core" "Shared")
          MISSING=0
          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking $PACKAGE v$VERSION on NuGet.org..."
            RESULT=$(dotnet nuget list package $PACKAGE --version $VERSION --source https://api.nuget.org/v3/index.json)
            if [ -z "$RESULT" ]; then
              echo "❌ $PACKAGE v$VERSION not found on NuGet.org!"
              MISSING=$((MISSING+1))
            else
              echo "✅ $PACKAGE v$VERSION exists on NuGet.org"
            fi
          done

          if [ $MISSING -ne 0 ]; then
            echo "Some packages were not published correctly!"
            exit 1
          fi

      - name: Verify GitHub Packages
        run: |
          PACKAGES=("Infrastructure" "Core" "Shared")
          MISSING=0
          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking $PACKAGE v$VERSION on GitHub Packages..."
            RESULT=$(dotnet nuget list package $PACKAGE --version $VERSION --source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json")
            if [ -z "$RESULT" ]; then
              echo "❌ $PACKAGE v$VERSION not found on GitHub Packages!"
              MISSING=$((MISSING+1))
            else
              echo "✅ $PACKAGE v$VERSION exists on GitHub Packages"
            fi
          done

          if [ $MISSING -ne 0 ]; then
            echo "Some packages were not published correctly on GitHub Packages!"
            exit 1
          fi
